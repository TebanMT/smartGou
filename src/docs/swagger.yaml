basePath: /v1
definitions:
  github_com_TebanMT_smartGou_src_modules_reference_interfaces_lambdas_get_categories.ResponsePaginated:
    properties:
      categories:
        items:
          $ref: '#/definitions/main.Category'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  github_com_TebanMT_smartGou_src_modules_reference_interfaces_lambdas_get_meta_categories.ResponsePaginated:
    properties:
      limit:
        type: integer
      meta_categories:
        items:
          $ref: '#/definitions/main.MetaCategoryResponse'
        type: array
      offset:
        type: integer
      total:
        type: integer
    type: object
  main.Category:
    properties:
      color:
        type: string
      description:
        type: string
      icon:
        type: string
      id:
        type: string
      meta_category_id:
        type: string
      name_en:
        type: string
      name_es:
        type: string
    type: object
  main.ConfirmOtpRequest:
    properties:
      code:
        type: string
      user_id:
        type: string
    required:
    - code
    - user_id
    type: object
  main.LoginWithEmailRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  main.LogoutRequest:
    properties:
      access_token:
        type: string
    required:
    - access_token
    type: object
  main.LogoutResponse:
    properties:
      success:
        type: boolean
    type: object
  main.MetaCategoryResponse:
    properties:
      color:
        type: string
      description:
        type: string
      icon:
        type: string
      id:
        type: string
      nameEn:
        type: string
      nameEs:
        type: string
    type: object
  main.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  main.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      id_token:
        type: string
      refresh_token:
        type: string
    type: object
  main.RequestRecoveryPassword:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  main.RequestRecoveryPasswordResponse:
    properties:
      success:
        type: boolean
    type: object
  main.RequestSignUpRequest:
    properties:
      dailing_code:
        type: string
      phone_number:
        type: string
    required:
    - dailing_code
    - phone_number
    type: object
  main.RequestSignUpResponse:
    properties:
      expires_at:
        type: string
      max_attempts:
        type: integer
      session:
        type: string
      user_id:
        type: string
    type: object
  main.ResetPasswordRequest:
    properties:
      code:
        type: string
      email:
        type: string
      password:
        type: string
    required:
    - code
    - email
    - password
    type: object
  main.ResetPasswordResponse:
    properties:
      success:
        type: boolean
    type: object
  main.SignUpByEmailRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  main.SignUpByEmailResponse:
    properties:
      user_id:
        type: string
    type: object
  main.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      id_token:
        type: string
      refresh_token:
        type: string
    type: object
  main.UserResponse:
    properties:
      created_at:
        type: string
      dailing_code:
        type: string
        x-nullable: "true"
      email:
        type: string
        x-nullable: "true"
      is_onboarding_completed:
        type: boolean
      last_name:
        type: string
        x-nullable: "true"
      name:
        type: string
        x-nullable: "true"
      phone:
        type: string
        x-nullable: "true"
      second_last_name:
        type: string
        x-nullable: "true"
      updated_at:
        type: string
      user_id:
        type: string
      username:
        type: string
        x-nullable: "true"
      verified_email:
        type: boolean
      verified_phone:
        type: boolean
    type: object
  main.VerifyOTPByPhoneRequest:
    properties:
      code:
        type: string
      session:
        type: string
      user_id:
        type: string
    required:
    - code
    - session
    - user_id
    type: object
  main.VerifyOTPByPhoneResponse:
    properties:
      expires_at:
        type: string
      max_attempts:
        type: integer
      session:
        type: string
      user_id:
        type: string
    type: object
  utils.Response-any:
    properties:
      data: {}
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-array_main_Category:
    properties:
      data:
        items:
          $ref: '#/definitions/main.Category'
        type: array
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-array_main_MetaCategoryResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/main.MetaCategoryResponse'
        type: array
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-github_com_TebanMT_smartGou_src_modules_reference_interfaces_lambdas_get_categories_ResponsePaginated:
    properties:
      data:
        $ref: '#/definitions/github_com_TebanMT_smartGou_src_modules_reference_interfaces_lambdas_get_categories.ResponsePaginated'
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-github_com_TebanMT_smartGou_src_modules_reference_interfaces_lambdas_get_meta_categories_ResponsePaginated:
    properties:
      data:
        $ref: '#/definitions/github_com_TebanMT_smartGou_src_modules_reference_interfaces_lambdas_get_meta_categories.ResponsePaginated'
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-main_LogoutResponse:
    properties:
      data:
        $ref: '#/definitions/main.LogoutResponse'
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-main_RefreshTokenResponse:
    properties:
      data:
        $ref: '#/definitions/main.RefreshTokenResponse'
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-main_RequestRecoveryPasswordResponse:
    properties:
      data:
        $ref: '#/definitions/main.RequestRecoveryPasswordResponse'
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-main_RequestSignUpResponse:
    properties:
      data:
        $ref: '#/definitions/main.RequestSignUpResponse'
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-main_ResetPasswordResponse:
    properties:
      data:
        $ref: '#/definitions/main.ResetPasswordResponse'
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-main_SignUpByEmailResponse:
    properties:
      data:
        $ref: '#/definitions/main.SignUpByEmailResponse'
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-main_TokenResponse:
    properties:
      data:
        $ref: '#/definitions/main.TokenResponse'
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-main_UserResponse:
    properties:
      data:
        $ref: '#/definitions/main.UserResponse'
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
  utils.Response-main_VerifyOTPByPhoneResponse:
    properties:
      data:
        $ref: '#/definitions/main.VerifyOTPByPhoneResponse'
      exception:
        type: string
        x-nullable: "true"
      message:
        type: string
      status_code:
        type: integer
    type: object
host: api.smartgo.com
info:
  contact: {}
  description: SmartGo API
  title: SmartGo API
  version: "1.0"
paths:
  /auth:
    patch:
      consumes:
      - application/json
      description: |-
        This endpoint verifies a OTP by email.
        Verify the code given a userID and a code. The code is the code that the user received in the email.
        Also, the email will be verified as true in provider (cognito) and database.
      parameters:
      - description: Request body
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.ConfirmOtpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response-any'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      summary: Login with email and password
      tags:
      - security
    post:
      consumes:
      - application/json
      description: |-
        This endpoint signs up a user by email and password.
        The user will be created in the database and inderity provider (cognito) if it doesn't exist.
        If the user exists, an error will be returned.
        A mail will be sent to the user to verify the email.
        If the user exists but the email is not verified, a new OTP will be sent to the user.
      parameters:
      - description: Request body
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.SignUpByEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-main_SignUpByEmailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      summary: Sign up by email and password
      tags:
      - security
  /auth/otp:
    patch:
      consumes:
      - application/json
      description: |-
        This endpoint verifies a OTP by phone number.
        If the OTP is valid, the user will be logged in and return the token entity.
        If the OTP is invalid, the user will be logged in and return the login challenge entity.
        The login challenge entity contains the session and the userID with which the user can try to verify the OTP again.
      parameters:
      - description: Request body
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.VerifyOTPByPhoneRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-main_VerifyOTPByPhoneResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response-any'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      summary: Verify OTP from phone
      tags:
      - security
    post:
      consumes:
      - application/json
      description: |-
        Try to sign up or login by phone number.
        The user will be created in the database and inderity provider (cognito) if it doesn't exist.
        If the user exists, the code will be sent to the phone number.
        The user will be created without password and return the session.
        The session is specific context for the user to login in the cognito user pool. It is used to verify the user's phone number.
        For others implementations, this session could be not needed.
        The user ID (uuid type) is the user's ID in the database and also the username in the cognito user pool.
      parameters:
      - description: Request body
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RequestSignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-main_RequestSignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      summary: Request sign up / login by phone
      tags:
      - security
  /auth/recovery-password:
    patch:
      consumes:
      - application/json
      description: Reset password. If the code, password and email are valid, the
        password will be reset.
      parameters:
      - description: Reset password request
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-main_ResetPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      summary: Reset password
      tags:
      - security
    post:
      consumes:
      - application/json
      description: |-
        Request password recovery. If the email is found, the user will receive an email with a code to reset the password.
        In otherwise, the user will receive an error.
      parameters:
      - description: Request password recovery
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RequestRecoveryPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-main_RequestRecoveryPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      summary: Request password recovery
      tags:
      - security
  /auth/sessions:
    delete:
      consumes:
      - application/json
      description: |-
        This endpoint is used to logout a user. It invalidates the refresh token not the access token.
        The access token could be used until its expiration but you can´t create a new access token with the same refresh token.
      parameters:
      - description: Access token
        in: body
        name: access_token
        required: true
        schema:
          $ref: '#/definitions/main.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-main_LogoutResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      summary: Logout
      tags:
      - security
    patch:
      consumes:
      - application/json
      description: Refresh access token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/main.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-main_RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      summary: Refresh access token
      tags:
      - security
    post:
      consumes:
      - application/json
      description: |-
        Login with email
        This use case is used to login a user with email and password.
        The user will be logged in if the email and password are correct, otherwise an error will be returned.
        The token is a JWT token that is used to authenticate the user.
        The token is valid for 1 hour.
      parameters:
      - description: Request body
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.LoginWithEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-main_TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      summary: Login with email and password
      tags:
      - security
  /references/categories:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint gets the categories for a user. It can be filtered by meta category id or name like.
        If no filters are provided, all categories will be returned.
        If meta category id is provided, only categories related to that meta category will be returned.
        If name like is provided, only categories related to that name will be returned.
        If paged is true, you must provide valid limit and offset values.
        If paged is false, all categories will be returned, ignoring limit and offset values.
        If order by is provided, the order of the categories will be based on the order by field and order dir field will be required.
        If order by is not provided, the categories will be returned in the order of the database.
      parameters:
      - description: Meta Category ID
        in: query
        name: meta_category_id
        type: string
      - description: Name Like
        in: query
        name: name_like
        type: string
      - description: Order By
        in: query
        name: order_by
        type: string
      - description: Order Dir
        in: query
        name: order_dir
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Paged
        in: query
        name: paged
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-github_com_TebanMT_smartGou_src_modules_reference_interfaces_lambdas_get_categories_ResponsePaginated'
        "206":
          description: The code 206 just means the response has not been paginated
            but the response will send with 200 code
          schema:
            $ref: '#/definitions/utils.Response-array_main_Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      security:
      - BearerAuth: []
      summary: Get Categories
      tags:
      - reference
  /references/meta-categories:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint gets the meta categories catalog.
        If no filters are provided, all meta categories will be returned.
        If name like is provided, only meta categories related to that name will be returned.
        If paged is true, you must provide valid limit and offset values.
        If paged is false, all meta categories will be returned, ignoring limit and offset values.
        If order by is provided, the order of the meta categories will be based on the order by field and order dir field will be required.
        If order by is not provided, the meta categories will be returned in the order of the database.
      parameters:
      - description: Name Like
        in: query
        name: name_like
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Paged
        in: query
        name: paged
        type: boolean
      - description: Order By
        in: query
        name: order_by
        type: string
      - description: Order Dir
        in: query
        name: order_dir
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-github_com_TebanMT_smartGou_src_modules_reference_interfaces_lambdas_get_meta_categories_ResponsePaginated'
        "206":
          description: The code 206 just means the response has not been paginated
            but the response will send with 200 code
          schema:
            $ref: '#/definitions/utils.Response-array_main_MetaCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      security:
      - BearerAuth: []
      summary: Get meta categories
      tags:
      - reference
  /users/{id-user}:
    get:
      consumes:
      - application/json
      description: This endpoint gets the user profile for a user.
      parameters:
      - description: User ID formatted as UUID
        in: path
        name: id-user
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-main_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
  /users/{id-user}/onboarding:
    patch:
      consumes:
      - application/json
      description: This endpoint completes the onboarding process for a user.
      parameters:
      - description: User ID formatted as UUID
        in: path
        name: id-user
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response-any'
      security:
      - BearerAuth: []
      summary: Complete onboarding
      tags:
      - users
schemes:
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
